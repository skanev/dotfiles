#!/usr/bin/env zsh

local session
local -a setup menu_items

[[ -z $MUX_SESSION ]] && export MUX_SESSION=${$(pwd):t}

setup=()
menu_items=()

directives() {
  setup+=($*)
}

menu-item() {
  local name key cmd
  local window_name window_command window_before

  name=$1
  key=""
  cmd=""

  shift

  while (( $# > 0 )); do
    case $1 in
      (-k)
        key=$2
        shift 2
        ;;

      (--tmux)
        cmd=$2
        shift 2
        ;;

      (--window)
        window_name=$2
        window_command=$3
        shift 3

        cmd="new-window -S -n $window_name \"${window_command}\""

        if [[ $1 == "--before" ]]; then
          window_before=$2
          shift 2

          cmd="$cmd ; move-window -s $window_name -b -t $window_before ; move-window -r"
        fi

        ;;

      (*)
        echo "Unknown argument: $1" >&2
        exit 1
        ;;
    esac
  done

  menu_items+=($name $key $cmd)
}

run-tmux() {
  local cmd

  cmd=""

  if [[ $1 == '--exec' ]]; then
    cmd="exec "
    shift
  fi

  local cmd="${cmd}tmux ${${(j: \; :)*}}"

  eval $cmd
}

start() {
  local variables="-e TMUX_MUX_SESSION=$MUX_SESSION -e TMUX_MUX_CONFIG=$MUX_CONFIG"
  if [[ -z $TMUX ]]; then
    run-tmux --exec "new-session -s $MUX_SESSION -n shell $variables" "${setup[@]}"
  else
    run-tmux "new-session -d -s $MUX_SESSION -n shell $variables" "switch-client -t $MUX_SESSION" "${setup[@]}"
  fi
}

attach() {
  if [[ -n $TMUX ]]; then
    tmux switch-client -t \=$MUX_SESSION
  else
    tmux attach-session -d -t \=$MUX_SESSION
  fi
}

attach-or-start() {
  if tmux has-session -t \=$MUX_SESSION 2> /dev/null; then
    attach
  else
    start
  fi
}

recreate() {
  local -a directives

  directives=(
    "set-option renumber-windows off"
    "new-window -t :100 -n peg"
  )

  for number in $(tmux list-windows -F "#I"); do
    directives+=("kill-window -t :$number")
  done

  directives+=(
    "new-window -n shell"
    "kill-window -t :100"
    $setup
    "set-option renumber-windows on"
  )

  run-tmux $directives
}

menu-separator() {
  menu_items+=("")
}

sticky-first-pane() {
  directives 'set-option -t :1.0 -p remain-on-exit' \
             'set-hook -t :1.0 pane-died respawn-pane' \
             'pipe-pane "~/.scripts/stalker stalk"'
}

inactive-server-pane() {
  directives "new-window -n server \"$1\"" \
             'set-option -p remain-on-exit' \
             'send-keys C-c'
}

display-menu() {
  tmux display-menu -x C -y C -T "Commands" "${menu_items[@]}"
}

if [[ -n $MUX_CONFIG && ${MUX_CONFIG:t} == 'mux' ]]; then
  source $MUX_CONFIG
elif [[ -n $MUX_CONFIG ]]; then
  eval "$(awk '/^@@end/ { within=0 } within { print $0 } /^@@mux/ { within=1 }' $MUX_CONFIG)"
fi

menu-separator
menu-item 'Respawn' -k r --tmux 'respawn-pane -k'

directives 'select-window -t :1'

[[ -z $1 ]] && 1=attach-or-start

case $1 in
  (menu)
    display-menu
    ;;

  (recreate)
    recreate
    ;;

  (start)
    start
    ;;

  (attach-or-start)
    attach-or-start
    ;;

  (--zsh-complete)
    echo menu recreate start attach-or-start
    ;;

  (*)
    echo "$0: don't know how to run $1" >&2
    exit 1
    ;;
esac
