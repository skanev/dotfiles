#!/usr/bin/env perl
use v5.32;
use warnings;

use experimental qw( signatures switch );

use autodie qw( :all );

use Carp;
use Data::Dump qw( dump );
use String::CamelSnakeKebab qw( upper_camel_case lower_snake_case );
use JSON::Parse qw( parse_json );
use File::Slurp qw( slurp );
use Rest::Client;

sub get( $url ) {
  my $client = REST::Client->new;
  $client->GET( $url );
  parse_json $client->responseContent();
}

sub backtick {
  my $command = shift;
  my $output = `$command`;
  die if $?;
  chomp $output;
  $output;
}

sub write_file {
  my ( $file, $contents ) = @_;

  open my $fh, '>', $file or croak "Can't open file $file";
  print { $fh } $contents;
  close $fh;
}

my $workspace = backtick('exercism workspace');
my $pwd = backtick('pwd');

unless ($pwd =~ s/^\Q$workspace\///o) {
  croak "Current directory $pwd does not seem to be under Exercism workspace $workspace";
}

my ( $track, $exercise ) = split "/", $pwd;

my $exercise_path;

$exercise_path = "$workspace/$track/$exercise" if $exercise;
my $command = $ARGV[0];

my %commands = (
  help   => [ sub { run_help() },   'Show help (default)' ],
  submit => [ sub { run_submit() }, 'Submit the solution' ],
  test   => [ sub { run_test() },   'Run the tests' ],
  list   => [ sub { run_list() },   'List all the exercises' ],
  next   => [ sub { run_next() },   'Download the next exercise' ],
  open   => [ sub { run_open() },   'Open the exercise' ],
  web    => [ sub { run_web() },    'Open in browser' ],
  'info' => [ sub { run_info() },   'Show info for the current exercise' ],
);

my %languages = (
  perl5 => {
    solution_file => sub { $exercise_path . upper_camel_case( $exercise ) . '.pm' },
    test_file => sub { "$exercise_path/$exercise.t" },
    test => sub { "prove $exercise.t" },
  },
  crystal => {
    solution_file => sub { "$exercise_path/src/" . lower_snake_case( $exercise ) . '.cr' },
    test_file => sub { "$exercise_path/spec/" . lower_snake_case( $exercise ) . '_spec.cr' },
    test => sub { 'crystal spec' },
    after_checkout => sub {
      say "$exercise_path/spec/*_spec.cr";
      for my $file ( glob "$exercise_path/spec/*_spec.cr" ) {
        my $contents = slurp( $file );
        $contents =~ s/^(\s+)pending /$1it /mg;
        write_file $file, $contents;
      }
    },
  },
  lua => {
    solution_file => sub { "$exercise_path/$exercise.lua" },
    test_file => sub { "$exercise_path/${exercise}_spec.lua" },
    test => sub { "busted" },
  },
  rust => {
    solution_file => sub { "$exercise_path/src/lib.rs" },
    test_file => sub { "$exercise_path/tests/$exercise.rs" },
    test => sub { "cargo test" },
    after_checkout => sub {
      for my $file ( glob "$exercise_path/tests/*.rs" ) {
        my $contents = slurp( $file );
        $contents =~ s/^#\[ignore\]\n//mg;
        write_file $file, $contents;
      }
    },
  },
  go => {
    solution_file => sub { "$exercise_path/@{[ lower_snake_case $exercise ]}.go" },
    test_file => sub { "$exercise_path/@{[ lower_snake_case $exercise ]}_test.go" },
    test => sub { "go test" },
  },
  nim => {
    solution_file => sub { "$exercise_path/@{[ lower_snake_case $exercise ]}.nim" },
    test_file => sub { "$exercise_path/test_@{[ lower_snake_case $exercise ]}.nim" },
    test => sub { "nim c -r test_@{[ lower_snake_case $exercise ]}.nim" },
  },
  kotlin => {
    solution_file => sub { "$exercise_path/src/main/kotlin/@{[ upper_camel_case $exercise ]}.kt" },
    test_file => sub { "$exercise_path/src/test/kotlin/@{[ upper_camel_case $exercise ]}Test.kt" },
    test => sub { "./gradlew test" },
    after_checkout => sub {
      backtick "chmod a+x $exercise_path/gradlew";
      for my $file ( glob "$exercise_path/src/test/kotlin/*.kt" ) {
        my $contents = slurp( $file );
        $contents =~ s/^\s+\@Ignore\n//mg;
        write_file $file, $contents;
      }
    },
    open => sub( $file, $test ) {
      backtick "open -a 'IntelliJ IDEA Ultimate' --args ."
    }
  },
);

my $lang = $languages{$track};

sub solution_file {
  return undef unless $exercise;
}

sub run_help {
  my $exercise = $exercise // '(none)';

  say <<~END;
  Track: $track
  Exercise: $exercise

  Commands:
  END

  while ( my ($name, $details) = each %commands) {
    printf "    %-10s %s\n", $name, $details->[1];
  }

  say '';
  say upper_camel_case $exercise;
}

sub exercises_list {
  state $list = 0;

  unless ( $list ) {
    my $json = get( "https://raw.githubusercontent.com/exercism/$track/master/config.json" );
    $list = [ map $_->{slug}, $json->{exercises}{practice}->@* ];
  }

  @$list;
}

sub downloaded_list {
  state $downloaded = 0;

  $downloaded ||= { map { s#^.*/##; $_ => 1 } glob "$workspace/$track/*" };

  $downloaded;
}

sub run_submit {
  croak "No exercise" unless defined $exercise;

  my $file = $lang->{solution_file}->();

  say $file;

  exec "exercism submit $file";
}

sub run_test {
  croak "No exercise" unless defined $exercise;

  exec $lang->{test}->();
}

sub run_list {
  my $downloaded = downloaded_list();

  say "Exercises\n";

  for my $name ( exercises_list() ) {
    my $state = $downloaded->{ $name } ? 'd' : ' ';
    say "    [$state] $name";
  }
}

sub run_next {
  my $downloaded = downloaded_list();

  for my $name ( exercises_list() ) {
    next if $downloaded->{ $name };

    my $command = "exercism download --exercise=$name --track=$track";

    say "running: $command";

    system $command;

    $exercise = $name;
    $exercise_path = "$workspace/$track/$exercise";

    $lang->{after_checkout}->() if $lang->{after_checkout};

    say "\nto cd in:\n\n    \$ cd $workspace/$track/$name\n";

    return;
  }

  say "All exercises downloaded";
}

sub run_open {
  croak "No exercise" unless defined $exercise;

  my $solution = $lang->{solution_file}->();
  my $test = $lang->{test_file}->();

  if ( $lang->{open} ) {
    $lang->{open}->( $solution, $test );
    return;
  }

  system "zsh -ci 'vig -- -o $solution $test'";
  system "tmux -2 new-session -A -s $exercise";
}

sub run_web {
  croak "No exercise" unless defined $exercise;

  system "exercism open $exercise";
}

sub run_info() {
  say "Exercise:      " . $exercise;
  say "Solution file: " . $lang->{solution_file}->();
  say "Test file:     " . $lang->{test_file}->();
  say "Text runner:   " . $lang->{test}->();
}

my $action = $commands{$command // 'help'}->[0] or croak "Unrecognized command $command";
$action->();
