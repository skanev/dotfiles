snippet unload
package.loaded['${1:`!p
import re
match = re.match(r'.*/lua/(.*)\.lua', path)
if match:
    snip.rv = match[1].replace('/', '.')
else:
    snip.rv = 'package'
`}'] = nil$0
endsnippet

snippet elif
elseif ${1:condition} then
	${0:--body}
endsnippet

snippet print
print("${1:string}")
endsnippet

snippet im
import "${1:import file}"
endsnippet

snippet assert "Assertion" b
assert(${1:condition}`!p
if t[2]:
	snip.rv = ", "
else:
	snip.rv = ""
`${2:msg})
endsnippet

snippet !fun(ction)?! "New function" br
function ${1:new_function}(${2:args})
	$0
end
endsnippet

snippet ford "pair for loop" b
for ${1:names} in ${2:expression} do
	$0
end
endsnippet

snippet forp "pair for loop" b
for ${1:name}, ${2:val} in pairs(${3:table_name}) do
	$0
end
endsnippet

snippet fori "ipair for foop" b
for ${1:idx}, ${2:val} in ipairs(${3:table_name}) do
	$0
end
endsnippet

snippet for "numeric for loop" b
for ${1:i} = ${2:first}, ${3:last} do
	$0
end
endsnippet

snippet do "do block"
do
	$0
end
endsnippet

snippet repeat "repeat loop" b
repeat
	$1
until $0
endsnippet

snippet while "while loop" b
while $1 do
	$0
end
endsnippet

snippet if "if statement" b
if $1 then
	$0
end
endsnippet

snippet ife "if/else statement" b
if $1 then
	$2
else
	$0
end
endsnippet

snippet eif "if/elseif statement" b
if $1 then
	$2
elseif $3 then
	$0
end
endsnippet

snippet eife "if/elseif/else statement" b
if $1 then
	$2
elseif $3 then
	$4
else
	$0
end
endsnippet

snippet pcall "pcall statement" b
local ok, err = pcall(${1:your_function})
if not ok then
	handler(${2:ok, err})
${3:else
	success(${4:ok, err})
}end
endsnippet

snippet local "local x = 1"
local ${1:x} = ${0:1}
endsnippet

snippet met "function Class:method()" b
function ${1:`!p
answer = None
lines = vim.eval("getbufline('', 1, '$')")
lines = list(lines[0:int(vim.eval("line('.') - 1"))])
lines.reverse()
for line in lines:
	if match := re.match(r'^function (\w+):(\w+)\(', line):
		answer = match.group(1)
		break

snip.rv = answer or 'Class'`}:${2:name}(${3})
	${0}
end
endsnippet

snippet cons
function ${1:name}:new(${2})
	local instance = {${3:`!p snip.rv = ", ".join("%s = %s" % (x.strip(), x.strip()) for x in t[2].split(",") if x.strip() != '')`}}
	self.__index = self
	${0}
	return setmetatable(instance, self)
end
endsnippet
