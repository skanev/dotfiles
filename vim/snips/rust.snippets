
#################
# Rust Snippets #
#################

snippet bench "'Bench function' b"
#[bench]
fn ${1:bench_function_name}(b: &mut test::Bencher) {
	b.iter(|| {
		${0}
	})
}
endsnippet

snippet new "'Constructor function'"
pub fn new(${2}) -> ${1:Self} {
	$1 { ${3} }
}
endsnippet

snippet main "'Main function'"
pub fn main() {
	${0}
}
endsnippet

snippet let "'let variable declaration with type inference'"
let ${1} = ${2};
endsnippet

snippet lett "'let variable declaration with explicit type annotation'"
let ${1}: ${2} = ${3};
endsnippet

snippet letm "'let mut variable declaration with type inference'"
let mut ${1} = ${2};
endsnippet

snippet lettm "'let mut variable declaration with explicit type annotation'"
let mut ${1}: ${2} = ${3};
endsnippet

snippet pri, "'print! with format param'"
print!("${1}{${2}}", ${3});
endsnippet

snippet pln, "'println! with format param'"
println!("${1}{${2}}", ${3});
endsnippet

snippet d "'dbg! debugging macro'"
dbg!(${0:${VISUAL}})
endsnippet

snippet d; "'dbg! debugging macro statement'"
dbg!(&${1});
${0}
endsnippet

# Modules
snippet ec "'extern crate'"
extern crate ${1:sync};
endsnippet

snippet ecl "'extern crate log'"
#[macro_use]
extern crate log;
endsnippet

snippet mod
mod ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0}
} /* $1 */
endsnippet

# Testing
snippet as "'assert!'"
assert!(${1:predicate});
endsnippet

snippet ase "'assert_eq!'"
assert_eq!(${1:expected}, ${2:actual});
endsnippet

snippet test "'Unit test function'"
#[test]
fn ${1:function_name}_test() {
	${0}
}
endsnippet

snippet testmod "'Test module' b"
#[cfg(test)]
mod tests {
	use super::${1:*};

	test${0}
}
endsnippet

snippet ig "'#[ignore]'"
#[ignore]
endsnippet

# Attributes
snippet allow "'allow lint attribute' b"
#[allow(${1:unused_variables})]
endsnippet

snippet cfg "'cfg attribute' b"
#[cfg(${1:target_os = "linux"})]
endsnippet

snippet feat "'feature attribute' b"
#![feature(${1:plugin})]
endsnippet

snippet der "'#[derive(..)]' b"
#[derive(${1:Debug})]
endsnippet

snippet attr "'#[..]' b"
#[${1:inline}]
endsnippet

snippet crate "'Define create meta attributes'"
// Crate name
#![crate_name = "${1:crate_name}"]
// Additional metadata attributes
#![desc = "${2:Description.}"]
#![license = "${3:BSD}"]
#![comment = "${4:Comment.}"]
// Specify the output type
#![crate_type = "${5:lib}"]
endsnippet

# Common types
snippet opt "'Option<T>'"
Option<${1:i32}>
endsnippet

snippet res "'Result<T, E>'"
Result<${1:&str}, ${2:()}>
endsnippet

# Control structures
snippet if
if ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet ife "'if / else'"
if ${1} {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

snippet ifl "'if let (...)'"
if let ${1:Some($2)} = $3 {
	${0:${VISUAL}}
}
endsnippet

snippet el "'else'"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eli "'else if'"
else if ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet mat "'match pattern'"
match ${1} {
	${2} => ${3}
}
endsnippet

snippet case "'Case clause of pattern match'"
${1:_} => ${2:expression}
endsnippet

snippet = "'=> '"
=> $0
endsnippet

snippet loop "'loop {}' b"
loop {
	${0:${VISUAL}}
}
endsnippet

snippet wh "'while loop'"
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet whl "'while let (...)'"
while let ${1:Some($2)} = $3 {
	${0:${VISUAL}}
}
endsnippet

snippet for "'for ... in ... loop'"
for ${1:i} in ${2} {
	${0}
}
endsnippet

# TODO commenting
snippet todo "'TODO comment'"
// TODO: $0
endsnippet

snippet fixme "'FIXME comment'"
// FIXME: $0
endsnippet

# Struct
snippet st "'Struct definition'"
struct ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0}
}
endsnippet

snippet stn "'Struct with new constructor'"
pub struct ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0}
}

impl$2 $1$2 {
	pub fn new(${4}) -> Self {
		$1 { ${5} }
	}
}
endsnippet

snippet ty "'Type alias'"
type ${1:NewName} = $2;
endsnippet

snippet enum "'enum definition'"
enum ${1:Name} {
	${2},
}
endsnippet

snippet penum "'pub enum definition'"
pub enum ${1:Name} {
	${2},
}
endsnippet

# Traits
snippet trait "'Trait definition'"
trait ${1:Name} {
	${0}
}
endsnippet

snippet drop "'Drop trait implementation (destructor)'"
impl Drop for $1 {
	fn drop(&mut self) {
		${0}
	}
}
endsnippet

# Statics
snippet ss "'static string declaration'"
static ${1}: &'static str = "${0}";
endsnippet

snippet stat "'static item declaration'"
static ${1}: ${2:usize} = ${0};
endsnippet

# Concurrency
snippet spawn "'spawn a thread'"
thread::spawn(${1:move }|| {
	${0}
});
endsnippet

snippet chan "'Declare (Sender, Receiver) pair of asynchronous channel()'"
let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();
endsnippet

# Implementations
snippet asref "'AsRef trait implementation'"
impl AsRef<${1:Ref}> for ${2:Type} {
	fn as_ref(&self) -> &${3:$1} {
		&self.${0:field}
	}
}
endsnippet

snippet asmut "'AsMut trait implementation'"
impl AsMut<${1:Ref}> for ${2:Type} {
	fn as_mut(&mut self) -> &mut ${3:$1} {
		&mut self.${0:field}
	}
}
endsnippet

snippet fd "'Struct field definition' w"
${1:name}: ${2:Type},
endsnippet

snippet || "'Closure, anonymous function (inline)' i"
${1:move }|$2| { $3 }
endsnippet

snippet |} "'Closure, anonymous function (block)' i"
${1:move }|$2| {
	$3
}
endsnippet

snippet macro "'macro_rules!' b"
macro_rules! ${1:name} {
	(${2:matcher}) => (
		$3
	)
}
endsnippet

snippet boxp "'Box::new()'"
Box::new(${0:${VISUAL}})
endsnippet

snippet rc "'Rc::new()'"
Rc::new(${0:${VISUAL}})
endsnippet

snippet unim "'unimplemented!()'"
unimplemented!()
endsnippet

snippet use "'use ...;' b"
use ${1:std::$2};
endsnippet

#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet fn "fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet afn "async fn name(?) -> ? {}"
async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pafn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pri "print!(..)" b
print!("$1"${2/..*/, /}$2);
endsnippet

snippet pln "println!(..)" b
println!("$1"${2/..*/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet .it ".iter()" i
.iter()$0
endsnippet

snippet impl "Struct/Trait implementation" b
impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {
	${0}
}
endsnippet
