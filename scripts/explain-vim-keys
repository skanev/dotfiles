#!/usr/bin/env perl

use v5.32;
use warnings;

use experimental qw( signatures switch );
use autodie;
use utf8::all;

use File::Slurp qw( slurp );
use List::MoreUtils qw( nsort_by );
use Carp qw( croak );
use Term::ReadKey qw( ReadMode ReadKey );
use Term::Cap;

my $alternate = <<'END';
┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬────────┐
│ ` ~ │ 1 ! │ 2 @ │ 3 # │ 4 $ │ 5 % │ 6 ^ │ 7 & │ 8 * │ 9 ( │ 0 ) │ - _ │ = + │ delete │
├─────┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬─────┤
│ tab    │ q Q │ w W │ e E │ r R │ t T │ y Y │ u U │ i I │ o O │ p P │ [ } │ ] } │ \ | │
├────────┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─────┤
│ caps     │ a A │ s S │ d D │ f F │ g G │ h H │ j J │ k K │ l L │ ; : │ ' " │  return │
├──────────┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴─────────┤
│ shift       │ z Z │ x X │ c C │ v V │ b B │ n N │ m M │ , < │ . > │ / ? │      shift │
├─────┬─────┬─┴───┬─┴────┬┴─────┴─────┴─────┴─────┴─────┼─────┴┬────┴┬────┴┬─────┬─────┤
│ fn  │  ⌃  │  ⌥  │  ⌘   │                              │  ⌘   │  ⌥  │  ◀︎  ├─────┤  ▶︎  │
└─────┴─────┴─────┴──────┴──────────────────────────────┴──────┴─────┴─────┴─────┴─────┘
END

my $keyboard = <<'END';
┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────────┐
│ `~ │ 1! │ 2@ │ 3# │ 4$ │ 5% │ 6^ │ 7& │ 8* │ 9( │ 0) │ -_ │ =+ │ delete │
├────┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──────┤
│ tab  │ qQ │ wW │ eE │ rR │ tT │ yY │ uU │ iI │ oO │ pP │ [} │ ]} │  \|  │
├──────┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴─┬──┴──────┤
│ caps   │ aA │ sS │ dD │ fF │ gG │ hH │ jJ │ kK │ lL │ ;: │ '" │  return │
├────────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴─────────┤
│ shift     │ zZ │ xX │ cC │ vV │ bB │ nN │ mM │ ,< │ .> │ /? │     shift │
├────┬─────┬┴──┬─┴───┬┴────┴────┴────┴────┴────┴───┬┴────┼───┬┴──┬────┬───┤
│ fn │  ⌃  │ ⌥ │  ⌘  │                             │  ⌘  │ ⌥ │ ◀︎ ├────┤ ▶︎ │
└────┴─────┴───┴─────┴─────────────────────────────┴─────┴───┴───┴────┴───┘
END

my %colors = (
  border  => "\e[38;5;250m",
  bound   => "\e[38;5;118m",
  local   => "\e[38;5;220m",
  unbound => "\e[38;5;241m",
  dimmed  => "\e[38;5;241m",
  special => "\e[38;5;165m",
  prefix  => "\e[38;5;110m",
  reset   => "\e[0m",
);

my $keyboard_key_pattern = qr/ (?!fn)(\S)(\S) /;
my $keyboard_key_replace = sub( $a, $b ) { " $a$b " };

sub prefix( @items ) {
  my $model = shift @items;
  my $end = length( $model ) - 1;

  for my $item ( @items ) {
    $end = length( $item ) - 1 if length( $item ) - 1 < $end;
    for my $i ( 0 .. $end ) {
      if ( substr( $model, $i, 1 ) ne substr( $item, $i, 1 ) ) {
        $end = $i - 1;
        next;
      }
    }
  }

  substr( $model, 0, $end + 1 );
}

sub mappings( $pattern, $lines ) {
  my %maps;

  $pattern = quotemeta $pattern;
  $pattern =~ s/_/(.)(.*)/;

  for my $line ( @$lines ) {
    next unless ( $line =~ /^(?:...)(\S+)\s+(?:[*& ])([@ ])(\S.*)$/ );

    my ( $key, $buffer, $cmd ) = ( $1, $2, $3 );

    if ( $key =~ $pattern ) {
      my $key = $1;

      $maps{$key}{all}{"$1$2"} = $cmd;

      $maps{$key}{buffer} = ($buffer eq '@') ? 1 : 0;
    }
  }

  for my $key ( keys %maps ) {
    my @mappings = values $maps{$key}{all}->%*;

    if ( @mappings > 1 ) {
      $maps{$key}{summary} = "[prefix]" . prefix( @mappings ) . "…";
    } else {
      $maps{$key}{summary} = $mappings[0] // '???';
    }
  }

  \%maps;
}

sub trim( $text, $size ) {
  if ( length( $text ) > $size ) {
    $text = substr $text, 0, $size - 1;
    $text =~ s/<[^<>]*?(…?)$/$1/;
    $text .= '…';
  }

  $text .= (' ' x ( $size - length( $text ) ) );
}

sub highlight( $command ) {
  $command =~ s/(<[^>]+>|…)/$colors{special}$1$colors{reset}/g;
  $command =~ s/^\[prefix\]/$colors{prefix}\[prefix]$colors{reset}/g;
  $colors{reset} . $command;
}

sub print_highlighted( $keys, %opts ) {
  my ( $top_row, ) = split( "\n", $keyboard );
  my $keyboard = $keyboard;

  chomp $top_row;

  my $width = length( $top_row );
  my $outer_padding = 2;
  my $command_padding = 2;
  my $inner_padding = 2;

  my $command_space = int( $width / 2 - $outer_padding - $command_padding - 1 - $inner_padding / 2 );

  my sub color( $k ) {
    my $color = !$keys->{$k} ? $colors{unbound} : $keys->{$k}{buffer} ? $colors{local} : $colors{bound};

    "$color$k$colors{border}"
  };

  my %order;
  my $i = 0;

  while ( $keyboard =~ /$keyboard_key_pattern/g ) {
    $order{$1} = $i++;
    $order{$2} = $i++;
  };

  $keyboard =~ s/$keyboard_key_pattern/$keyboard_key_replace->( color($1) , color($2) )/eg;

  print $colors{border} . $keyboard . "\n";

  my $even = 0;
  my $ignore = $opts{ignore} ? sub( $key ) { $key =~ /^$opts{ignore}$/ } : sub { 0 };

  for my $key ( nsort_by { $order{$_} // -1 } keys %$keys ) {
    next if $ignore->( $key );

    my $mapping = $keys->{$key};

    my $dimmed = $opts{focus} && $opts{focus} ne $key;
    my $key_color = $dimmed ? $colors{dimmed} : $mapping->{buffer} ? $colors{local} : $colors{bound};
    my $reset_color = $dimmed ? $colors{dimmed} : $colors{reset};

    print ' ' x $outer_padding;

    my $command = trim $mapping->{summary}, $command_space;
    $command = highlight $command unless $dimmed;

    print "$key_color$key$reset_color" . (' ' x $command_padding) . $command;

    if ( $even ) {
      print "\n";
    } else {
      print ' ' x $inner_padding;
    }

    $even = !$even;
  }

  print "$colors{reset}\n\n";

  if ( defined $opts{focus} && defined $keys->{$opts{focus}} && keys $keys->{$opts{focus}}{all}->%* > 1 ) {
    my $focus = $opts{focus};
    my %maps = $keys->{$focus}{all}->%*;

    print $colors{border} . " " x $outer_padding . '-' x ( $width - 2 * $outer_padding ) . "\n\n";

    for my $key ( keys %maps ) {
      print ' ' x $outer_padding;

      print $colors{bound} . trim( $key, 5 ) . highlight( $maps{$key} ) . "\n";
    }

    print "\n"
  }
}

die "Needs two args!" unless @ARGV >= 2;

my %opts = (
  ignore => undef,
);

for ( @ARGV[ 2 .. $#ARGV ] ) {
  when ( /^--ignore=(.*)$/ ) { $opts{ignore} = qr/$1/ }
  default { croak "Unknown option: $_" }
}

my $focus = "";
my $mappings = mappings( $ARGV[0], [ slurp $ARGV[1] ]);

ReadMode 4;

while ( $focus ne "\3" && $focus ne " " ) {
  print Term::Cap->Tgetent()->Tputs('cl');

  print_highlighted $mappings, focus => $focus, ignore => $opts{ignore};

  $focus = ReadKey() // '';

  last if $focus eq "\3"; # CTRL-C
  last if $focus eq "\a"; # CTRL-G
  last if $focus eq " ";  # SPACE

  $focus = "" if $focus eq "\n" || $focus eq "\e";
}
