#!/usr/bin/env ruby
# You can pipe hivemind to this process and it will update the tmux status bar
# with a status bar fragment that indicates whether it compiles or not. It used
# to be a perl script, but now it depends on a bunch of Ruby stuff that hasn't
# started to take shape at the time of this writing.
#
# In order to get it working, add the following task in VSCode.
#
#    {
#      // See https://go.microsoft.com/fwlink/?LinkId=733558
#      // for the documentation about the tasks.json format
#      "version": "2.0.0",
#      "tasks": [
#        {
#          "label": "Track Hivemind",
#          "type": "shell",
#          "isBackground": true,
#          "command": "tail -f -n 0 /tmp/hivemind.log",
#          "problemMatcher": {
#            "owner": "hivemind",
#            "fileLocation": "autoDetect",
#            "pattern": {
#              "regexp": "^ERROR in ([^ :]+) (\\d+):(\\d+)-(\\d+) (?:(TS\\d+): )?(.*)",
#              "file": 1,
#              "line": 2,
#              "column": 3,
#              "endColumn": 4,
#              "code": 5,
#              "message": 6
#            },
#            "background": {
#              "activeOnStart": false,
#              "beginsPattern": "^STARTED$",
#              "endsPattern": "^(FAILURE|SUCCESS)$"
#            }
#          }
#        }
#      ]
#    }

require 'pathname'

$LOAD_PATH.unshift Pathname.new(__FILE__).realpath.join('../../support/ruby/mire/lib')
require 'mire'

include Mire

log = File.open '/tmp/hivemind.log', 'w'
log.sync = true

trap('SIGINT') do
  log.close
  log = nil
end

track_hivemind(STDIN) do |bus|
  bus.listen(
    start: -> { log&.puts 'STARTED' },
    error: -> (message) { log&.puts "ERROR in #{message}" },
    finish: -> (errors) { log&.puts(errors.zero? ? 'SUCCESS' : 'FAILURE') },
  )

  failed_previously = false

  bus.listen(
    start: -> {
      Tmux.status_working(failed_previously ? Tmux::FAILURE : Tmux::WAITING)
      Tmux.refresh_client
    },
    line: -> (line) { print line },
    finish: -> (errors) {
      if errors.zero?
        Tmux.status_success
        failed_previously = false
      else
        Tmux.status_failure errors
        failed_previously = true
      end
      Tmux.refresh_client
    },
    exit: -> { Tmux.status_clear }
  )
end
